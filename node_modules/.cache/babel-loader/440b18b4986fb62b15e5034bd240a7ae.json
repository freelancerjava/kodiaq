{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if ('value' in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _get = function get(_x, _x2, _x3) {\n  var _again = true;\n\n  _function: while (_again) {\n    var object = _x,\n        property = _x2,\n        receiver = _x3;\n    _again = false;\n    if (object === null) object = Function.prototype;\n    var desc = Object.getOwnPropertyDescriptor(object, property);\n\n    if (desc === undefined) {\n      var parent = Object.getPrototypeOf(object);\n\n      if (parent === null) {\n        return undefined;\n      } else {\n        _x = parent;\n        _x2 = property;\n        _x3 = receiver;\n        _again = true;\n        desc = parent = undefined;\n        continue _function;\n      }\n    } else if ('value' in desc) {\n      return desc.value;\n    } else {\n      var getter = desc.get;\n\n      if (getter === undefined) {\n        return undefined;\n      }\n\n      return getter.call(receiver);\n    }\n  }\n};\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError('Cannot call a class as a function');\n  }\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== 'function' && superClass !== null) {\n    throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _aphroditeNoImportant = require('aphrodite/no-important');\n\nvar _Thumbnail = require('./Thumbnail');\n\nvar _Thumbnail2 = _interopRequireDefault(_Thumbnail);\n\nvar _Arrow = require('./Arrow');\n\nvar _Arrow2 = _interopRequireDefault(_Arrow);\n\nvar _theme = require('../theme');\n\nvar _theme2 = _interopRequireDefault(_theme);\n\nvar classes = _aphroditeNoImportant.StyleSheet.create({\n  paginatedThumbnails: {\n    bottom: _theme2['default'].container.gutter.vertical,\n    height: _theme2['default'].thumbnail.size,\n    padding: '0 50px',\n    position: 'absolute',\n    textAlign: 'center',\n    whiteSpace: 'nowrap'\n  }\n});\n\nvar arrowStyles = {\n  height: _theme2['default'].thumbnail.size + _theme2['default'].thumbnail.gutter * 2,\n  width: 40\n};\n\nvar PaginatedThumbnails = function (_Component) {\n  _inherits(PaginatedThumbnails, _Component);\n\n  function PaginatedThumbnails(props) {\n    _classCallCheck(this, PaginatedThumbnails);\n\n    _get(Object.getPrototypeOf(PaginatedThumbnails.prototype), 'constructor', this).call(this, props);\n\n    this.state = {\n      hasCustomPage: false\n    };\n    this.gotoPrev = this.gotoPrev.bind(this);\n    this.gotoNext = this.gotoNext.bind(this);\n  }\n\n  _createClass(PaginatedThumbnails, [{\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      // Component should be controlled, flush state when currentImage changes\n      if (nextProps.currentImage !== this.props.currentImage) {\n        this.setState({\n          hasCustomPage: false\n        });\n      }\n    } // ==============================\n    // METHODS\n    // ==============================\n\n  }, {\n    key: 'getFirst',\n    value: function getFirst() {\n      var _props = this.props;\n      var currentImage = _props.currentImage;\n      var offset = _props.offset;\n\n      if (this.state.hasCustomPage) {\n        return this.clampFirst(this.state.first);\n      }\n\n      return this.clampFirst(currentImage - offset);\n    }\n  }, {\n    key: 'setFirst',\n    value: function setFirst(event, newFirst) {\n      var first = this.state.first;\n\n      if (event) {\n        event.preventDefault();\n        event.stopPropagation();\n      }\n\n      if (first === newFirst) return;\n      this.setState({\n        hasCustomPage: true,\n        first: newFirst\n      });\n    }\n  }, {\n    key: 'gotoPrev',\n    value: function gotoPrev(event) {\n      this.setFirst(event, this.getFirst() - this.props.offset);\n    }\n  }, {\n    key: 'gotoNext',\n    value: function gotoNext(event) {\n      this.setFirst(event, this.getFirst() + this.props.offset);\n    }\n  }, {\n    key: 'clampFirst',\n    value: function clampFirst(value) {\n      var _props2 = this.props;\n      var images = _props2.images;\n      var offset = _props2.offset;\n      var totalCount = 2 * offset + 1; // show $offset extra thumbnails on each side\n\n      if (value < 0) {\n        return 0;\n      } else if (value + totalCount > images.length) {\n        // Too far\n        return images.length - totalCount;\n      } else {\n        return value;\n      }\n    } // ==============================\n    // RENDERERS\n    // ==============================\n\n  }, {\n    key: 'renderArrowPrev',\n    value: function renderArrowPrev() {\n      if (this.getFirst() <= 0) return null;\n      return _react2['default'].createElement(_Arrow2['default'], {\n        direction: 'left',\n        size: 'small',\n        icon: 'arrowLeft',\n        onClick: this.gotoPrev,\n        style: arrowStyles,\n        title: 'Previous (Left arrow key)',\n        type: 'button'\n      });\n    }\n  }, {\n    key: 'renderArrowNext',\n    value: function renderArrowNext() {\n      var _props3 = this.props;\n      var offset = _props3.offset;\n      var images = _props3.images;\n      var totalCount = 2 * offset + 1;\n      if (this.getFirst() + totalCount >= images.length) return null;\n      return _react2['default'].createElement(_Arrow2['default'], {\n        direction: 'right',\n        size: 'small',\n        icon: 'arrowRight',\n        onClick: this.gotoNext,\n        style: arrowStyles,\n        title: 'Next (Right arrow key)',\n        type: 'button'\n      });\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props4 = this.props;\n      var images = _props4.images;\n      var currentImage = _props4.currentImage;\n      var onClickThumbnail = _props4.onClickThumbnail;\n      var offset = _props4.offset;\n      var totalCount = 2 * offset + 1; // show $offset extra thumbnails on each side\n\n      var thumbnails = [];\n      var baseOffset = 0;\n\n      if (images.length <= totalCount) {\n        thumbnails = images;\n      } else {\n        // Try to center current image in list\n        baseOffset = this.getFirst();\n        thumbnails = images.slice(baseOffset, baseOffset + totalCount);\n      }\n\n      return _react2['default'].createElement('div', {\n        className: (0, _aphroditeNoImportant.css)(classes.paginatedThumbnails)\n      }, this.renderArrowPrev(), thumbnails.map(function (img, idx) {\n        return _react2['default'].createElement(_Thumbnail2['default'], _extends({\n          key: baseOffset + idx\n        }, img, {\n          index: baseOffset + idx,\n          onClick: onClickThumbnail,\n          active: baseOffset + idx === currentImage\n        }));\n      }), this.renderArrowNext());\n    }\n  }]);\n\n  return PaginatedThumbnails;\n}(_react.Component);\n\nexports['default'] = PaginatedThumbnails;\nPaginatedThumbnails.propTypes = {\n  currentImage: _propTypes2['default'].number,\n  images: _propTypes2['default'].array,\n  offset: _propTypes2['default'].number,\n  onClickThumbnail: _propTypes2['default'].func.isRequired\n};\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}